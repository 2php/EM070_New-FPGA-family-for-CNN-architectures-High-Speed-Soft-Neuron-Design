-- hds header_start
--
-- VHDL Entity InovateFPGA_de10.tx_rx_fsm.interface
--
-- Created:
--          by - HoA.UNKNOWN (LAPTOP-6PPNGBRG)
--          at - 17:37:52 04/25/2018
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.5 (Build 170)
--
-- hds header_end
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ENTITY tx_rx_fsm IS
   PORT( 
      Relu_out     : IN     std_logic_vector (7 DOWNTO 0);
      Trans_Finish : IN     std_logic;
      data_outreg  : IN     std_logic_vector (7 DOWNTO 0);
      master_clk   : IN     std_logic;
      rst          : IN     std_logic;
      rx_done      : IN     std_logic;
      D_in         : OUT    std_logic_vector (7 DOWNTO 0);
      RELU_en      : OUT    std_logic;
      W0           : OUT    std_logic_vector (8 DOWNTO 0);
      W1           : OUT    std_logic_vector (8 DOWNTO 0);
      W2           : OUT    std_logic_vector (8 DOWNTO 0);
      W3           : OUT    std_logic_vector (8 DOWNTO 0);
      dbus0        : OUT    std_logic_vector (7 DOWNTO 0);
      dbus1        : OUT    std_logic_vector (7 DOWNTO 0);
      dbus2        : OUT    std_logic_vector (7 DOWNTO 0);
      dbus3        : OUT    std_logic_vector (7 DOWNTO 0);
      tx_request   : OUT    std_logic
   );

-- Declarations

END tx_rx_fsm ;

-- hds interface_end
--
-- VHDL Architecture InovateFPGA_de10.tx_rx_fsm.fsm
--
-- Created:
--          by - HoA.UNKNOWN (LAPTOP-6PPNGBRG)
--          at - 17:37:52 04/25/2018
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.5 (Build 170)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ARCHITECTURE fsm OF tx_rx_fsm IS

   -- Architecture Declarations
   signal reg: std_logic_vector (7 downto 0);
   
   signal reg0, reg1,reg2,reg3: std_logic_vector (7 downto 0);
   
   signal regw0, regw1,regw2,regw3: std_logic_vector (8 downto 0);
   
   signal count: integer range 0 to 50;

   TYPE STATE_TYPE IS (
      s0,
      s1,
      s3,
      s4,
      s5,
      s7,
      s8,
      s9,
      s10,
      s11,
      s12,
      s13,
      s14,
      s15,
      s16,
      s17,
      s18,
      s19,
      s20,
      s21,
      s22,
      s6,
      s23,
      s24,
      s25,
      s26,
      s27,
      s28,
      s29,
      s30,
      s31
   );

   -- State vector declaration
   ATTRIBUTE state_vector : string;
   ATTRIBUTE state_vector OF fsm : ARCHITECTURE IS "current_state" ;


   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE ;
   SIGNAL next_state : STATE_TYPE ;

BEGIN

   ----------------------------------------------------------------------------
   clocked : PROCESS(
      master_clk,
      rst
   )
   ----------------------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= s0;
         -- Reset Values
         count <= 0;
         reg <= (others=>'1');
         reg0 <= (others=>'0');
         reg1 <= (others=>'0');
         reg2 <= (others=>'0');
         reg3 <= (others=>'0');
         regw0 <= (others=>'0');
         regw1 <= (others=>'0');
         regw2 <= (others=>'0');
         regw3 <= (others=>'0');
      ELSIF (master_clk'EVENT AND master_clk = '1') THEN
         current_state <= next_state;
         -- Default Assignment To Internals

         -- Combined Actions for internal signals only
         CASE current_state IS
         WHEN s0 =>
            reg <= (others => '0');
            count <=0;
         WHEN s1 =>
            reg <="00111010";
         WHEN s3 =>
            reg <= data_outreg;
         WHEN s4 =>
            reg0 <=reg;
         WHEN s7 =>
            reg <= data_outreg;
         WHEN s9 =>
            reg <= (others => '0');
         WHEN s10 =>
            count <= count+1;
         WHEN s11 =>
            reg <= data_outreg;
         WHEN s13 =>
            reg1 <=reg;
         WHEN s14 =>
            reg2 <=reg;
         WHEN s15 =>
            reg3 <=reg;
         WHEN s18 =>
            reg <= Relu_out ;
         WHEN s19 =>
            reg <= Relu_out ;
         WHEN s24 =>
            regw0(7 downto 0) <=reg;
         WHEN s25 =>
            regw0(8) <=reg(0);
         WHEN s26 =>
            regw1(7 downto 0) <=reg;
         WHEN s27 =>
            regw1(8) <=reg(0);
         WHEN s28 =>
            regw2(7 downto 0) <=reg;
         WHEN s29 =>
            regw2(8) <=reg(0);
         WHEN s30 =>
            regw3(7 downto 0) <=reg;
         WHEN s31 =>
            regw3(8) <=reg(0);
         WHEN OTHERS =>
            NULL;
         END CASE;

      END IF;

   END PROCESS clocked;

   ----------------------------------------------------------------------------
   nextstate : PROCESS (
      count,
      current_state,
      rx_done
   )
   ----------------------------------------------------------------------------
   BEGIN
      CASE current_state IS
      WHEN s0 =>
         IF (rx_done = '0') THEN
            next_state <= s1;
         ELSE
            next_state <= s0;
         END IF;
      WHEN s1 =>
         IF (rx_done = '1') THEN
            next_state <= s3;
         ELSE
            next_state <= s1;
         END IF;
      WHEN s3 =>
            next_state <= s11;
      WHEN s4 =>
            next_state <= s10;
      WHEN s5 =>
            next_state <= s23;
      WHEN s7 =>
         IF (count =0) THEN
            next_state <= s4;
         ELSIF (count =1) THEN
            next_state <= s13;
         ELSIF (count =2) THEN
            next_state <= s14;
         ELSIF (count =3) THEN
            next_state <= s15;
         ELSIF (count =4) THEN
            next_state <= s24;
         ELSIF (count =5) THEN
            next_state <= s25;
         ELSIF (count =6) THEN
            next_state <= s26;
         ELSIF (count =7) THEN
            next_state <= s27;
         ELSIF (count =8) THEN
            next_state <= s28;
         ELSIF (count =9) THEN
            next_state <= s29;
         ELSIF (count =10) THEN
            next_state <= s30;
         ELSIF (count =11) THEN
            next_state <= s31;
         ELSE
            next_state <= s7;
         END IF;
      WHEN s8 =>
            next_state <= s18;
      WHEN s9 =>
         IF (rx_done = '0') THEN
            next_state <= s1;
         ELSE
            next_state <= s9;
         END IF;
      WHEN s10 =>
            next_state <= s17;
      WHEN s11 =>
            next_state <= s7;
      WHEN s12 =>
            next_state <= s5;
      WHEN s13 =>
            next_state <= s10;
      WHEN s14 =>
            next_state <= s10;
      WHEN s15 =>
            next_state <= s10;
      WHEN s16 =>
            next_state <= s12;
      WHEN s17 =>
            next_state <= s9;
      WHEN s18 =>
            next_state <= s19;
      WHEN s19 =>
            next_state <= s20;
      WHEN s20 =>
            next_state <= s21;
      WHEN s21 =>
            next_state <= s22;
      WHEN s22 =>
         next_state <= s22;
      WHEN s6 =>
            next_state <= s8;
      WHEN s23 =>
            next_state <= s6;
      WHEN s24 =>
            next_state <= s10;
      WHEN s25 =>
            next_state <= s10;
      WHEN s26 =>
            next_state <= s10;
      WHEN s27 =>
            next_state <= s10;
      WHEN s28 =>
            next_state <= s10;
      WHEN s29 =>
            next_state <= s10;
      WHEN s30 =>
            next_state <= s10;
      WHEN s31 =>
            next_state <= s16;
      WHEN OTHERS =>
         next_state <= s0;
      END CASE;

   END PROCESS nextstate;

   ----------------------------------------------------------------------------
   output : PROCESS (
      current_state,
      reg,
      reg0,
      reg1,
      reg2,
      reg3,
      regw0,
      regw1,
      regw2,
      regw3
   )
   ----------------------------------------------------------------------------
   BEGIN
      -- Default Assignment
      D_in <= "01000100";
      RELU_en <= '0';
      W0 <= (others=>'0');
      W1 <= (others=>'0');
      W2 <= (others=>'0');
      W3 <= (others=>'0');
      dbus0 <= (others=>'0');
      dbus1 <= (others=>'0');
      dbus2 <= (others=>'0');
      dbus3 <= (others=>'0');
      tx_request <= '0';
      -- Default Assignment To Internals

      -- Combined Actions
      CASE current_state IS
      WHEN s0 =>
         tx_request<= '0';
         D_in <= (others => '0'); 
      WHEN s1 =>
         tx_request<= '0';
         D_in <= (others => '0'); 
      WHEN s3 =>
         tx_request <= '0';
         D_in<= (others => '1'); 
      WHEN s4 =>
         tx_request <= '0';
      WHEN s5 =>
         tx_request <= '0';
         RELU_en <= '1';
         dbus0 <= reg0;
         dbus1 <= reg1;
         dbus2 <= reg2;
         dbus3 <= reg3;
         W0 <= regw0 ;
         W1 <=regw1;
         W2 <=regw2;
         W3 <=regw3;
      WHEN s7 =>
         tx_request <= '0';
      WHEN s8 =>
         tx_request <= '0';
         RELU_en <= '1';
         dbus0 <= reg0;
         dbus1 <= reg1;
         dbus2 <= reg2;
         dbus3 <= reg3;
         W0 <= regw0 ;
         W1 <=regw1;
         W2 <=regw2;
         W3 <=regw3;
      WHEN s9 =>
         tx_request<= '0';
         D_in <= (others => '0'); 
      WHEN s10 =>
         tx_request <= '0';
      WHEN s11 =>
         tx_request <= '0';
         D_in<= (others => '1'); 
      WHEN s12 =>
         tx_request <= '0';
         RELU_en <= '1';
         dbus0 <= reg0;
         dbus1 <= reg1;
         dbus2 <= reg2;
         dbus3 <= reg3;
         W0 <= regw0 ;
         W1 <=regw1;
         W2 <=regw2;
         W3 <=regw3;
      WHEN s13 =>
         tx_request <= '0';
      WHEN s14 =>
         tx_request <= '0';
      WHEN s15 =>
         tx_request <= '0';
      WHEN s16 =>
         tx_request <= '0';
         
         dbus0 <= reg0;
         dbus1 <= reg1;
         dbus2 <= reg2;
         dbus3 <= reg3;
         W0 <= regw0 ;
         W1 <=regw1;
         W2 <=regw2;
         W3 <=regw3;
      WHEN s17 =>
         tx_request <= '0';
      WHEN s18 =>
         tx_request <= '0';
      WHEN s19 =>
         tx_request <= '0';
      WHEN s20 =>
         tx_request <= '1';
         D_in <=reg;
      WHEN s21 =>
         tx_request <= '1';
         D_in <=reg;
      WHEN s22 =>
         tx_request<= '0';
         D_in <=reg;
      WHEN s6 =>
         tx_request <= '0';
         RELU_en <= '1';
         dbus0 <= reg0;
         dbus1 <= reg1;
         dbus2 <= reg2;
         dbus3 <= reg3;
         W0 <= regw0 ;
         W1 <=regw1;
         W2 <=regw2;
         W3 <=regw3;
      WHEN s23 =>
         tx_request <= '0';
         RELU_en <= '1';
         dbus0 <= reg0;
         dbus1 <= reg1;
         dbus2 <= reg2;
         dbus3 <= reg3;
         W0 <= regw0 ;
         W1 <=regw1;
         W2 <=regw2;
         W3 <=regw3;
      WHEN s24 =>
         tx_request <= '0';
      WHEN s25 =>
         tx_request <= '0';
      WHEN s26 =>
         tx_request <= '0';
      WHEN s27 =>
         tx_request <= '0';
      WHEN s28 =>
         tx_request <= '0';
      WHEN s29 =>
         tx_request <= '0';
      WHEN s30 =>
         tx_request <= '0';
      WHEN s31 =>
         tx_request <= '0';
      WHEN OTHERS =>
         NULL;
      END CASE;

   END PROCESS output;

   -- Concurrent Statements

END fsm;
